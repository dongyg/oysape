name: Pack Linux

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g. v3.10.2)'
        required: true
        default: 'v3.10.2'

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux-x64
            asset_path: Oysape-linux-standalone-x86_64.zip
            artifact_name: linux-x64-artifact
          - os: ubuntu-latest
            platform: linux-arm64
            asset_path: Oysape-linux-standalone-aarch64.zip
            artifact_name: linux-arm64-artifact

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@main

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip

      # Linux x64-specific steps
      - name: Setup Linux x64
        if: matrix.platform == 'linux-x64'
        run: |
          # Install system dependencies
          sudo apt-get update
          sudo apt-get install -y python3-dev python3-venv libgl1-mesa-dev libxkbcommon-x11-0 libdbus-1-3 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-shape0 libxcb-xinerama0 libxcb-xfixes0 libxcb-cursor0

          # Create and activate a virtual environment
          python3 -m venv venv-oysape
          source venv-oysape/bin/activate

          # Install Python dependencies
          pip install --upgrade pip
          pip install pyqt5 pyqtwebengine qtpy -r requirements.txt

          # Build
          pyinstaller build-linux.spec -- --standalone

          # Copy necessary system libraries into the distribution package
          mkdir -p dist/Oysape-linux-standalone-x86_64/lib
          cp /usr/lib/x86_64-linux-gnu/libxcb*.so* dist/Oysape-linux-standalone-x86_64/lib/
          cp /usr/lib/x86_64-linux-gnu/libX*.so* dist/Oysape-linux-standalone-x86_64/lib/
          cp /usr/lib/x86_64-linux-gnu/libdbus-1.so* dist/Oysape-linux-standalone-x86_64/lib/

          # Creating a startup script wrapper
          echo '#!/bin/bash
          DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
          export LD_LIBRARY_PATH="$DIR/lib:$LD_LIBRARY_PATH"
          exec "$DIR/Oysape-linux-standalone-x86_64" "$@"' > dist/Oysape-linux-standalone-x86_64/run.sh

          chmod +x dist/Oysape-linux-standalone-x86_64/run.sh

          # Create zip archive
          cd dist
          zip -r ../Oysape-linux-standalone-x86_64.zip Oysape-linux-standalone-x86_64

      # Linux arm64-specific steps
      - name: Setup Linux arm64
        if: matrix.platform == 'linux-arm64'
        run: |
          # Setting up QEMU for arm64 emulation
          sudo apt-get update
          sudo apt-get install -y qemu-user-static

          # Create an arm64 build environment using Docker
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

          # Build using arm64 Docker image
          docker run --rm -v ${{ github.workspace }}:/workspace --platform linux/arm64 ubuntu:latest /bin/bash -c '
            apt-get update && \
            # Install Python and build dependencies
            apt-get install -y python3 python3-pip python3-venv \
                            python3-pyqt5 python3-pyqt5.qtwebengine \
                            build-essential python3-dev \
                            pyinstaller && \
            cd /workspace && \
            python3 -m venv venv-oysape && \
            . venv-oysape/bin/activate && \
            pip install -r requirements.txt && \
            # Remove PyQt5 and PyQtWebEngine from requirements if they are listed
            sed -i "/PyQt5/d" requirements.txt && \
            sed -i "/PyQtWebEngine/d" requirements.txt && \
            # Create symbolic links for system PyQt5
            ln -s /usr/lib/python3/dist-packages/PyQt5 venv-oysape/lib/python3.*/site-packages/ && \
            ln -s /usr/lib/python3/dist-packages/PyQt5-qt5 venv-oysape/lib/python3.*/site-packages/ && \
            ln -s /usr/lib/python3/dist-packages/sip.cpython-*.so venv-oysape/lib/python3.*/site-packages/ && \
            pyinstaller build-linux.spec -- --standalone
          '
          # Create zip archive
          cd dist
          zip -r ../Oysape-linux-standalone-x86_64.zip Oysape-linux-standalone-x86_64

      # Upload build products as artifacts
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.asset_path }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Download all build artifacts
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # Create a release and upload all assets
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          name: Linux Release ${{ github.event.inputs.version }}
          tag_name: ${{ github.event.inputs.version }}
          draft: false
          prerelease: false
          files: |
            artifacts/linux-x64-artifact/Oysape-linux-standalone-x86_64.zip
            artifacts/linux-arm64-artifact/Oysape-linux-standalone-aarch64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}